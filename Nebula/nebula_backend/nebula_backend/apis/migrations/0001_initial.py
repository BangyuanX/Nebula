# Generated by Django 3.0.1 on 2020-01-08 08:41

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Level',
            fields=[
                ('project', models.UUIDField(blank=True, null=True)),
                ('level_uuid', models.UUIDField(primary_key=True, serialize=False)),
                ('level_revit_id', models.IntegerField(blank=True, null=True)),
                ('level_name', models.CharField(blank=True, max_length=50, null=True)),
                ('elevation', models.FloatField(blank=True, null=True)),
                ('notes', models.FloatField(blank=True, null=True)),
                ('gsf', models.FloatField(blank=True, null=True)),
                ('usf', models.FloatField(blank=True, null=True)),
                ('rsf', models.FloatField(blank=True, null=True)),
                ('usf_per_desk', models.FloatField(blank=True, null=True)),
                ('deskcount', models.IntegerField(blank=True, null=True)),
                ('average_office_deskcount', models.FloatField(blank=True, null=True)),
                ('geometric_level', models.IntegerField(blank=True, null=True)),
                ('lounge_percent_of_usf', models.FloatField(blank=True, null=True)),
                ('physical_desk_count', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'level',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectInfo',
            fields=[
                ('stargate_id', models.UUIDField()),
                ('pmr_repository_id', models.UUIDField()),
                ('project_name', models.CharField(blank=True, max_length=20, null=True)),
                ('building_name', models.CharField(blank=True, max_length=50, null=True)),
                ('business_line', models.UUIDField(blank=True, null=True)),
                ('landlord', models.UUIDField(blank=True, null=True)),
                ('project_adress_point', models.TextField(blank=True, null=True)),
                ('project_address_en', models.CharField(blank=True, max_length=50, null=True)),
                ('project_address_local', models.CharField(blank=True, max_length=50, null=True)),
                ('project_market', models.CharField(blank=True, max_length=50, null=True)),
                ('project_city', models.CharField(blank=True, max_length=50, null=True)),
                ('project_status', models.CharField(blank=True, max_length=50, null=True)),
                ('usf_per_desk', models.FloatField(blank=True, null=True)),
                ('building_uuid', models.UUIDField(primary_key=True, serialize=False)),
                ('pmr_branch_id', models.UUIDField(blank=True, null=True)),
                ('average_office_desk_count', models.FloatField(blank=True, null=True)),
                ('template_version', models.CharField(blank=True, max_length=10, null=True)),
                ('revit_file_path', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'project_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectLooseFurniture',
            fields=[
                ('room_id', models.UUIDField(blank=True, null=True)),
                ('furniture_id', models.UUIDField(primary_key=True, serialize=False)),
                ('furniture_type_id', models.UUIDField(blank=True, db_column='Furniture_type_id', null=True)),
                ('location_point', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'project_loose_furniture',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectWorkstations',
            fields=[
                ('room_id', models.UUIDField(blank=True, null=True)),
                ('ws_id', models.UUIDField(primary_key=True, serialize=False)),
                ('ws_type_id', models.UUIDField(blank=True, null=True)),
                ('location_point', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'project_workstations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_revit_id', models.IntegerField()),
                ('room_uuid', models.UUIDField()),
                ('room_number', models.CharField(blank=True, max_length=10, null=True)),
                ('room_name', models.CharField(blank=True, max_length=50, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('has_window', models.BooleanField(blank=True, null=True)),
                ('deskcount', models.IntegerField(blank=True, null=True)),
                ('physical_deskcount', models.IntegerField(blank=True, null=True)),
                ('occunpancy', models.UUIDField(blank=True, null=True)),
                ('program_type', models.CharField(max_length=20)),
                ('internal_room_count', models.IntegerField(blank=True, null=True)),
                ('has_av', models.BooleanField(blank=True, null=True)),
                ('outline', models.TextField(blank=True, null=True)),
                ('level_revit_id', models.IntegerField()),
            ],
            options={
                'db_table': 'room',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestTable',
            fields=[
                ('test_col', models.CharField(blank=True, max_length=50, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'test_table',
                'managed': False,
            },
        ),
    ]
